import telebot
from telebot import types
import os
import requests
import json
import time
from datetime import datetime
import telebot.apihelper

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

bot = telebot.TeleBot(BOT_TOKEN)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
CONSTRUCTION_TYPES = ["–°–∫—Ä–æ–ª–∏", "–ï–∫—Ä–∞–Ω–∏", "–©–∏—Ç–∏", "–Ü–Ω—à–µ"]
TEAMS = ["–ë—Ä–∏–≥–∞–¥–∞ 1", "–ë—Ä–∏–≥–∞–¥–∞ 2"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
STEPS = {
    "OBJECT_CODE": "object_code",
    "CONSTRUCTION_TYPE": "construction_type", 
    "TASK": "task",
    "TEAM": "team",
    "PHOTO_BEFORE": "photo_before",
    "PHOTO_AFTER": "photo_after",
    "COMMENT": "comment"
}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "step": STEPS["OBJECT_CODE"],
        "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "location": "–ö–∏—ó–≤"  # –í—Å–µ–≥–¥–∞ –ö–∏–µ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    bot.send_message(
        chat_id, 
        "üëã –í—ñ—Ç–∞—î–º–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º–æ –∑–≤—ñ—Ç –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ —Ä–æ–±–æ—Ç–∏.\n\nüè¢ –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –æ–±'—î–∫—Ç–∞:"
    )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏")
        return
    
    current_step = user_data[chat_id]["step"]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞
    if current_step == STEPS["OBJECT_CODE"]:
        user_data[chat_id]["object_code"] = message.text
        user_data[chat_id]["step"] = STEPS["CONSTRUCTION_TYPE"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for const_type in CONSTRUCTION_TYPES:
            markup.add(types.KeyboardButton(const_type))
        
        bot.send_message(
            chat_id, 
            f"üè¢ –ö–æ–¥ –æ–±'—î–∫—Ç–∞: {message.text}\n\nüèóÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:",
            reply_markup=markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    elif current_step == STEPS["CONSTRUCTION_TYPE"]:
        if message.text in CONSTRUCTION_TYPES:
            user_data[chat_id]["construction_type"] = message.text
            user_data[chat_id]["step"] = STEPS["TASK"]
            
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardRemove()
            bot.send_message(
                chat_id, 
                f"üèóÔ∏è –¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: {message.text}\n\nüìã –û–ø–∏—à—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è (—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–ª–æ –∑—Ä–æ–±–∏—Ç–∏):",
                reply_markup=markup
            )
        else:
            bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑—ñ —Å–ø–∏—Å–∫—É")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏—è
    elif current_step == STEPS["TASK"]:
        user_data[chat_id]["task"] = message.text
        user_data[chat_id]["step"] = STEPS["TEAM"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –±—Ä–∏–≥–∞–¥–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for team in TEAMS:
            markup.add(types.KeyboardButton(team))
        
        bot.send_message(
            chat_id, 
            f"üìã –ó–∞–≤–¥–∞–Ω–Ω—è: {message.text}\n\nüë∑ –û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è:",
            reply_markup=markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–∏–≥–∞–¥—ã
    elif current_step == STEPS["TEAM"]:
        if message.text in TEAMS:
            user_data[chat_id]["team"] = message.text
            user_data[chat_id]["step"] = STEPS["PHOTO_BEFORE"]
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
            
            bot.send_message(
                chat_id, 
                f"üë∑ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {message.text}\n\nüì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –î–û –ø–æ—á–∞—Ç–∫—É —Ä–æ–±—ñ—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
                reply_markup=markup
            )
        else:
            bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∑—ñ —Å–ø–∏—Å–∫—É")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –î–û
    elif current_step == STEPS["PHOTO_BEFORE"] and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_data[chat_id]["photo_before"] = None
        user_data[chat_id]["step"] = STEPS["PHOTO_AFTER"]
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –ü–û–°–õ–ï
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
        
        bot.send_message(
            chat_id, 
            "üì∏ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ü–Ü–°–õ–Ø –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±—ñ—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
            reply_markup=markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –ü–û–°–õ–ï
    elif current_step == STEPS["PHOTO_AFTER"] and message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_data[chat_id]["photo_after"] = None
        user_data[chat_id]["step"] = STEPS["COMMENT"]
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
        
        bot.send_message(
            chat_id, 
            "üí¨ –î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
            reply_markup=markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    elif current_step == STEPS["COMMENT"]:
        comment = message.text
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
            comment = "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"
        
        user_data[chat_id]["comment"] = comment
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        photo_before_status = "–æ—Ç—Ä–∏–º–∞–Ω–æ" if user_data[chat_id].get('photo_before') else "–ø—Ä–æ–ø—É—â–µ–Ω–æ"
        photo_after_status = "–æ—Ç—Ä–∏–º–∞–Ω–æ" if user_data[chat_id].get('photo_after') else "–ø—Ä–æ–ø—É—â–µ–Ω–æ"
        
        summary = f"""
‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ!

üìÖ –î–∞—Ç–∞: {user_data[chat_id]['date']}
üìç –ú—ñ—Å—Ç–æ: {user_data[chat_id]['location']}
üè¢ –ö–æ–¥ –æ–±'—î–∫—Ç–∞: {user_data[chat_id]['object_code']}
üèóÔ∏è –¢–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: {user_data[chat_id]['construction_type']}
üìã –ó–∞–≤–¥–∞–Ω–Ω—è: {user_data[chat_id]['task']}
üë∑ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {user_data[chat_id]['team']}
üì∏ –§–æ—Ç–æ –î–û: {photo_before_status}
üì∏ –§–æ—Ç–æ –ü–Ü–°–õ–Ø: {photo_after_status}
üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}

–î–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É!
"""
        
        markup = types.ReplyKeyboardRemove()
        bot.send_message(chat_id, summary, reply_markup=markup)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Make.com
        send_to_make(bot, user_data[chat_id])
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_data[chat_id]

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏")
        return
    
    current_step = user_data[chat_id]["step"]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –î–û
    if current_step == STEPS["PHOTO_BEFORE"]:
        photo_id = message.photo[-1].file_id
        user_data[chat_id]["photo_before"] = photo_id
        user_data[chat_id]["step"] = STEPS["PHOTO_AFTER"]
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ –ü–û–°–õ–ï
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
        
        bot.send_message(
            chat_id, 
            "‚úÖ –§–æ—Ç–æ –î–û –æ—Ç—Ä–∏–º–∞–Ω–æ\n\nüì∏ –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ü–Ü–°–õ–Ø –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±—ñ—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
            reply_markup=markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ü–û–°–õ–ï
    elif current_step == STEPS["PHOTO_AFTER"]:
        photo_id = message.photo[-1].file_id
        user_data[chat_id]["photo_after"] = photo_id
        user_data[chat_id]["step"] = STEPS["COMMENT"]
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
        
        bot.send_message(
            chat_id, 
            "‚úÖ –§–æ—Ç–æ –ü–Ü–°–õ–Ø –æ—Ç—Ä–∏–º–∞–Ω–æ\n\nüí¨ –î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':",
            reply_markup=markup
        )
    
    else:
        bot.send_message(chat_id, "‚ùå –ó–∞—Ä–∞–∑ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ñ–æ—Ç–æ")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Make.com
def send_to_make(bot, data):
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        payload = {
            "date": data['date'],
            "location": data['location'],
            "object_code": data['object_code'],
            "construction_type": data['construction_type'],
            "task": data['task'],
            "team": data['team'],
            "comment": data['comment']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if data.get('photo_before'):
            payload['photo_before_url'] = bot.get_file_url(data['photo_before'])
        else:
            payload['photo_before_url'] = None
            
        if data.get('photo_after'):
            payload['photo_after_url'] = bot.get_file_url(data['photo_after'])
        else:
            payload['photo_after_url'] = None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(WEBHOOK_URL, json=payload)
        
        if response.status_code == 200:
            print("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Make.com")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def start_bot():
    while True:
        try:
            print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
            bot.polling(none_stop=True, timeout=10, long_polling_timeout=20)
        except requests.exceptions.ReadTimeout:
            print("‚ùå Timeout error: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
        except requests.exceptions.ConnectionError:
            print("‚ùå Connection error: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        except telebot.apihelper.ApiTelegramException as e:
            if "409" in str(e):
                print("‚ùå –ö–æ–Ω—Ñ–ª—ñ–∫—Ç: —ñ–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–∂–µ –ø—Ä–∞—Ü—é—î. –ó—É–ø–∏–Ω—è—î–º–æ—Å—è...")
                break
            else:
                print(f"‚ùå Telegram API error: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
                time.sleep(15)
        except Exception as e:
            print(f"‚ùå Unexpected error: {e}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    start_bot()
